# -*- coding: utf-8 -*-
""" Tests for api.v1.account """
from __future__ import print_function, unicode_literals

import pytest
import json
import string
import random

from flask import url_for


@pytest.fixture(autouse=True)
def _patch_cereconf(cereconf):
    # Password rules for testing
    cereconf.PASSWORD_CHECKS = {
        'rigid': (
            ('simple_entropy_calculator',
             {'min_required_entropy': 32,
              'min_groups': 3,
              'min_chars_per_group': 2}),
        ),
    }


def random_string(length=32):
    return ''.join(random.choice(string.ascii_letters + string.digits + ' ')
                   for _ in range(length))


VALID_PASSWORD = random_string() + '√¶√∏√•' + 'üêõ' + '–æ–ø–∏—Ç–∞–π—Ç–æ–≤–∞'
INVALID_PASSWORD = 'too short'


def test_get_account(client, auth_header, account_foo, person_foo):
    assert account_foo.account_name
    res = client.get(
        url_for('api_v1.account',
                name=account_foo.account_name),
        headers=auth_header,
    )
    print('Response:', repr(res))
    assert res.status_code == 200
    data = res.json
    print('JSON:', repr(data))
    assert data['name'] == account_foo.account_name
    assert data['owner']['id'] == person_foo.entity_id


def test_account_set_and_verify_valid_password(client, auth_header,
                                               account_foo):
    """ Sets a valid password. Verifies new credentials internally and
    against the REST API. """
    post = client.post(
        url_for('api_v1.account-password',
                name=account_foo.account_name),
        headers=auth_header,
        content_type="application/json",
        data=json.dumps({
            'password': VALID_PASSWORD,
        }),
    )
    print('Response (set password):', repr(post))
    assert post.status_code == 200
    assert account_foo.verify_auth(VALID_PASSWORD)

    post = client.post(
        url_for('api_v1.account-password-verify',
                name=account_foo.account_name),
        headers=auth_header,
        content_type="application/json",
        data=json.dumps({
            'password': VALID_PASSWORD,
        }),
    )
    print('Response (verify password):', repr(post))
    assert post.status_code == 200
    data = post.json
    print('JSON (verify password):', repr(data))
    assert data['verified'] is True


def test_account_set_and_verify_invalid_passowrd(client, auth_header,
                                                 account_foo):
    """ Attempts to set an invalid passwords. Makes sure password did not
    change. """
    post = client.post(
        url_for('api_v1.account-password',
                name=account_foo.account_name),
        headers=auth_header,
        content_type="application/json",
        data=json.dumps({
            'password': INVALID_PASSWORD,
        }),
    )
    print('Response (set password):', repr(post))
    assert post.status_code == 400
    assert not account_foo.verify_auth(INVALID_PASSWORD)

    post = client.post(
        url_for('api_v1.account-password-verify',
                name=account_foo.account_name),
        headers=auth_header,
        content_type="application/json",
        data=json.dumps({
            'password': INVALID_PASSWORD,
        }),
    )
    print('Response (verify password):', repr(post))
    assert post.status_code == 200
    data = post.json
    print('JSON (verify password):', repr(data))
    assert not data['verified']


def test_account_set_password_autogenerated_when_missing(client, auth_header,
                                                         account_foo):
    """ Sets a new password with no payload. Attempts to auth with the
    randomly generated password. """
    post = client.post(
        url_for('api_v1.account-password',
                name=account_foo.account_name),
        headers=auth_header,
        content_type="application/json",
        data=json.dumps({}),
    )
    print('Response:', repr(post))
    assert post.status_code == 200
    data = post.json
    print('JSON:', repr(data))
    assert 'password' in data
    assert account_foo.verify_auth(data['password'])


def test_check_valid_password(client, auth_header, account_foo):
    """ Check a valid and invalid password against the password rules. """
    post = client.post(
        url_for('api_v1.account-password-check',
                name=account_foo.account_name),
        headers=auth_header,
        content_type="application/json",
        data=json.dumps({
            'password': VALID_PASSWORD,
        }),
    )
    print('Response:', repr(post))
    assert post.status_code == 200
    data = post.json
    assert data['passed']


def test_check_invalid_password(client, auth_header, account_foo):
    """ Check a valid and invalid password against the password rules. """
    post = client.post(
        url_for('api_v1.account-password-check',
                name=account_foo.account_name),
        headers=auth_header,
        content_type="application/json",
        data=json.dumps({
            'password': INVALID_PASSWORD,
        }),
    )
    print('Response:', repr(post))
    assert post.status_code == 200
    data = post.json
    assert not data['passed']
